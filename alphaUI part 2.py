# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'alphaUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from multiprocessing.sharedctypes import Value
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import numpy as np
import cv2
import time
import serial
arduino = serial.Serial(port='COM3', baudrate = 115200, timeout=.1)          

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1366, 768)
        
        self.sec = 0
        self.min = 0
        self.secTotal = 0
        self.total = 0
        self.stateGerak = 0
        self.stateGerakTurun = 0
        self.stateTime = 0

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.photo = QtWidgets.QLabel(self.centralwidget)
        self.photo.setGeometry(QtCore.QRect(100, 20, 500, 390))
        self.photo.setFrameShape(QtWidgets.QFrame.Box)
        self.photo.setLineWidth(4)
        self.photo.setText("")
        self.photo.setPixmap(QtGui.QPixmap(""))
        self.photo.setScaledContents(True)
        self.photo.setObjectName("photo")



        self.liveFeed = QtWidgets.QLabel(self.centralwidget)
        self.liveFeed.setGeometry(QtCore.QRect(731, 20, 500, 390 ))
        self.liveFeed.setFrameShape(QtWidgets.QFrame.Box)
        self.liveFeed.setLineWidth(4)
        self.liveFeed.setText("")
        self.liveFeed.setPixmap(QtGui.QPixmap(""))
        self.liveFeed.setScaledContents(True)
        self.liveFeed.setObjectName("liveFeed")

        self.Worker1 = Worker1()
        self.Worker2 = Worker2()
        self.Worker3 = Worker3()
        # self.Worker1.ImageUpdate.connect(self.ImageUpdateSlot)



        self.btnOtomatis = QtWidgets.QPushButton(self.centralwidget)
        self.btnOtomatis.setGeometry(QtCore.QRect(180, 420, 75, 23))
        self.btnOtomatis.setObjectName("btnOtomatis")
        
        self.btnRGB = QtWidgets.QPushButton(self.centralwidget)
        self.btnRGB.setGeometry(QtCore.QRect(270, 420, 75, 23))
        self.btnRGB.setObjectName("btnRGB")
        
        
        self.btnRESET = QtWidgets.QPushButton(self.centralwidget)
        self.btnRESET.setGeometry(360, 420, 75, 23)
        self.btnRESET.setText("RESET")
        self.btnRESET.setObjectName("btnRESET")

        self.btnSUHU = QtWidgets.QPushButton(self.centralwidget)
        self.btnSUHU.setGeometry(450,420,75,23)
        self.btnSUHU.setText("SUHU")
        self.btnSUHU.setObjectName("btnSTART")

        
       

       
    

        self.btnSTART = QtWidgets.QPushButton(self.centralwidget)
        self.btnSTART.setGeometry(800,420,75,23)
        self.btnSTART.setText("LIVE CAM")
        self.btnSTART.setObjectName("btnSTART")
        
        self.btnSTOP = QtWidgets.QPushButton(self.centralwidget)
        self.btnSTOP.setGeometry(900,420,75,23)
        self.btnSTOP.setText("STOP")
        self.btnSTOP.setObjectName("btnSTOP")

        self.btnCAPTURE = QtWidgets.QPushButton(self.centralwidget)
        self.btnCAPTURE.setGeometry(1000,420,75,23)
        self.btnCAPTURE.setText("CAPTURE")
        self.btnCAPTURE.setObjectName("btnCAPTURE")
       
        self.btnMANUAL = QtWidgets.QPushButton(self.centralwidget)
        self.btnMANUAL.setGeometry(1100,420,75,23)
        self.btnMANUAL.setText("START")
        self.btnMANUAL.setObjectName("btnMANUAL")



        self.Worker2.suhuGUI.connect(self.updateSuhu)
        self.Worker1.ImageUpdate.connect(self.ImageUpdateSlot)
        self.btnRGB.clicked.connect(self.showValueRGB)
        self.btnOtomatis.clicked.connect(self.start)
        self.btnSTOP.clicked.connect(self.CancelFeed)
        self.btnCAPTURE.clicked.connect(self.Worker1.count)
        self.btnSTART.clicked.connect(self.runFeed)
        self.btnSUHU.clicked.connect(self.runSuhu)
        self.btnRESET.clicked.connect(self.motorTurun)
        self.btnMANUAL.clicked.connect(self.runManual)
       
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(75)
        self.labelR = QtWidgets.QLabel(self.centralwidget)
        self.labelR.setGeometry(QtCore.QRect(105, 480, 51, 21))
        self.labelR.setFont(font)
        self.labelR.setObjectName("labelR")
        self.labelG = QtWidgets.QLabel(self.centralwidget)
        self.labelG.setGeometry(QtCore.QRect(300, 480, 51, 21))
      
        self.labelG.setFont(font)
        self.labelG.setObjectName("labelG")
        self.labelB = QtWidgets.QLabel(self.centralwidget)
        self.labelB.setGeometry(QtCore.QRect(495, 480, 51, 21))
        self.labelB.setFont(font)
        self.labelB.setObjectName("labelB")


        font.setPointSize(12)
        font.setWeight(12)
        self.inputTimer = QtWidgets.QLineEdit(self.centralwidget)
        self.inputTimer.setFont(font)
        self.inputTimer.setGeometry(QtCore.QRect(175, 550, 81, 31))
        self.inputTimer.setObjectName("InputTimer")
        
        

        font.setPointSize(14)
        font.setWeight(75)
        self.countdownLabel = QtWidgets.QLabel(self.centralwidget)
        self.countdownLabel.setFont(font)
        self.countdownLabel.setObjectName("countdown")
        self.countdownLabel.setGeometry(QtCore.QRect(400, 553, 200,21))
        self.countdownLabel.setText("00:00")
        
        font.setPointSize(14)
        
        self.labelKondisi = QtWidgets.QLabel(self.centralwidget)
        self.labelKondisi.setFont(font)
        self.labelKondisi.setObjectName("labelKondisi")
        self.labelKondisi.setGeometry(QtCore.QRect(105,630,400,31))
        self.labelKondisi.setText("Kondisi: ")

        self.timerLabel = QtWidgets.QLabel(self.centralwidget)
        self.timerLabel.setFont(font)
        self.timerLabel.setObjectName("countdown")
        self.timerLabel.setGeometry(QtCore.QRect(105, 550, 200, 21))
        self.timerLabel.setText("Timer: ")
    
        self.suhuLabel = QtWidgets.QLabel(self.centralwidget)
        self.suhuLabel.setFont(font)
        self.suhuLabel.setObjectName("countdown")
        self.suhuLabel.setGeometry(QtCore.QRect(105, 595, 200, 21))
        self.suhuLabel.setText("Suhu: ")

        self.countdown = QTimer()
        self.countdown.setInterval(1000)
        self.countdown.timeout.connect(self.counter)              
   
        self.showValueR = QtWidgets.QLabel(self.centralwidget)
        self.showValueR.setGeometry(QtCore.QRect(130, 475, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.showValueR.setFont(font)
        self.showValueR.setFrameShape(QtWidgets.QFrame.Box)
        self.showValueR.setFrameShadow(QtWidgets.QFrame.Raised)
        self.showValueR.setObjectName("showValueR")
        self.showValueG = QtWidgets.QLabel(self.centralwidget)
        self.showValueG.setGeometry(QtCore.QRect(325, 475, 81, 31))
        self.showValueG.setFont(font)
        self.showValueG.setFrameShape(QtWidgets.QFrame.Box)
        self.showValueG.setFrameShadow(QtWidgets.QFrame.Raised)
        self.showValueG.setObjectName("showValueG")
        self.showValueB = QtWidgets.QLabel(self.centralwidget)
        self.showValueB.setGeometry(QtCore.QRect(520, 475, 81, 31))
        self.showValueB.setFont(font)
        self.showValueB.setFrameShape(QtWidgets.QFrame.Box)
        self.showValueB.setFrameShadow(QtWidgets.QFrame.Raised)
        self.showValueB.setObjectName("showValueB")
                      



        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 802, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def start(self):
        self.countdown.start()
    
    def counter(self):
        if self.stateTime == 1:
            self.sec +=1
            self.secTotal +=1                
            print(self.sec)
            self.countdownLabel.setText(str(self.min)+':'+str(self.sec))
            
            #ngubah interval
            if self.sec == 60:
                self.sec = 0 
                self.min = 0
                self.secTotal = 0
                self.countdownLabel.setText("00:00")     
                self.countdown.stop()               
                self.otomatis()         
       
             
        if self.stateTime == 0:
            self.sec +=1
            self.secTotal +=1                
            
            
            if self.sec == 60:
                self.sec = 0
                self.min += 1 
            
            self.countdownLabel.setText(str(self.min)+':'+str(self.sec))
            

            if self.secTotal == int(self.inputTimer.text()):
                print(int(self.inputTimer.text()))
                print('timer over')
                self.sec = 0 
                self.min = 0
                self.secTotal = 0
                self.countdownLabel.setText("00:00")
        

                self.countdown.stop()
                
                self.otomatis()
        

            
    
    def runManual(self):
        self.Worker3.start()

    def runSuhu(self):
        self.Worker2.suhuGUI.connect(self.updateSuhu)
        self.Worker2.start()
        
    
    def stopSuhu(self):
        self.Worker2.stop()

    def ImageUpdateSlot(self, Image):
        self.liveFeed.setPixmap(QPixmap.fromImage(Image))

    def updateSuhu(self, suhuGUI):
        self.suhuLabel.setText('Suhu: ' + suhuGUI)
    

    def runFeed(self):
        self.Worker1.start()
        self.Worker1.ImageUpdate.connect(self.ImageUpdateSlot)
        self.Worker1.start()
        
    def CancelFeed(self):
        self.Worker1.stop()
        self.Worker2.stop()
        self.Worker3.stop()
        

    def write_read(self, state):
        arduino.write(bytes(state, 'utf-8'))
        time.sleep(0.05)
        data = arduino.readline()
        return data
                
    def otomatis(self):
        
        print('masuk konsol')
        TIMER = int(2) #atur waktu mundur foto
        # Open the camera
        # Capture = cv2.VideoCapture(0)      

        self.motorNaik()
        Capture = cv2.VideoCapture(1)
        #waktu mundur foto
        prev = time.time()
        while TIMER >= 0:
            ret, img = Capture.read()
        
            # Display countdown on each frame
            # specify the font and draw the
            # countdown using puttext
            font = cv2.FONT_HERSHEY_SIMPLEX
            cv2.putText(img, str(TIMER),
                        (200, 250), font,
                        7, (0, 255, 255),
                        4, cv2.LINE_AA)
            # cv2.imshow('mulai mau keofot', img)
            # cv2.waitKey(125)
                    
                # current time
            cur = time.time()
                
            # Update and keep track of Countdown
            # if time elapsed is one second
            # than decrease the counter
            if cur-prev >= 1:
                prev = cur
                TIMER = TIMER-1

        ret, img = Capture.read()
 
        cv2.imwrite('sampel.jpg', img)

        print(self.total)

        Capture.release()
        # cv2.destroyAllWindows()

        self.photo.setPixmap(QtGui.QPixmap("sampel.JPG"))
        self.interval()
        # self.showValueRGB()
        
    def motorNaik(self):
        while True:
            
            value = self.write_read('1')         
            valueStr = value.decode('utf-8')
            print(valueStr)
            print(value)
            if valueStr == '3':
                print(valueStr)
                print('test')
                break
    
    def motorTurun(self):
        
        self.photo.setPixmap(QtGui.QPixmap(""))
        while True:
            value = self.write_read('2')
            valueStr = value.decode('utf-8')
            print(valueStr)
            print(value)
            if valueStr == '3':
                print(valueStr)
                print('test')
                break
    
    def showValueRGB(self):
        bacaFoto = cv2.imread('sampel.jpg')
        average_rgb_row = np.average(bacaFoto, axis = 0)
        average_rgb = np.average(average_rgb_row, axis = 0)
        
        print(average_rgb)
        
        self.photo.setPixmap(QtGui.QPixmap("sampel.JPG"))
        
        self.total = np.sum(average_rgb)
        
        self.showValueR.setText(str(average_rgb[0]))
        self.showValueG.setText(str(average_rgb[1]))
        self.showValueB.setText(str(average_rgb[2]))

        if average_rgb[0] >= 50 and average_rgb[0] <=100:
            self.labelKondisi.setText("Kondisi : Gosong")

        elif average_rgb[0] >= 100 and average_rgb[0] <=141: 
            self.labelKondisi.setText("Kondisi : Matang" )          
            

        elif average_rgb[0] >142 and average_rgb[0]<175:
                       
            self.labelKondisi.setText("Kondisi : Belum Matang")                    
            
        
        elif average_rgb[0] >= 175 and average_rgb[0]<=200:
            self.labelKondisi.setText("Kondisi : Mentah")         


    def interval(self):
        bacaFoto = cv2.imread('sampel.jpg')
        average_rgb_row = np.average(bacaFoto, axis = 0)
        average_rgb = np.average(average_rgb_row, axis = 0)
        
        print(average_rgb)
        self.total = np.sum(average_rgb)
        
        self.showValueR.setText(str(average_rgb[0]))
        self.showValueG.setText(str(average_rgb[1]))
        self.showValueB.setText(str(average_rgb[2]))
        
        
        if average_rgb[0] >= 50 and average_rgb[0] <=100: #ini sebenernya 70
            self.labelKondisi.setText("Kondisi : Gosong")
            
            
                     
            
        elif average_rgb[0] >= 100 and average_rgb[0] <=141: 
            self.labelKondisi.setText("Kondisi : Matang")
      
            

        elif average_rgb[0] >142 and average_rgb[0]<175:
                       
            self.labelKondisi.setText("Kondisi : Belum Matang")                    
            self.stateGerak = 1 #ini sebenernya 1 
            
        
        elif average_rgb[0] >= 175 and average_rgb[0]<=200:
            self.labelKondisi.setText("Kondisi : Mentah")            


        if self.stateGerak == 1:
            print("TURRUUUUUUUUUUUUUUUN")
            if self.stateGerakTurun == 0:
                self.motorTurun()                
            self.stateTime = 1 #tutup ntar
            self.photo.setPixmap(QtGui.QPixmap("sampel.JPG"))
            self.countdown.start()
        
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btnOtomatis.setText(_translate("MainWindow", "START"))
        self.btnRGB.setText(_translate("MainWindow", "SHOW RGB"))
        self.labelR.setText(_translate("MainWindow", "R:"))
        self.labelG.setText(_translate("MainWindow", "G:"))
        self.labelB.setText(_translate("MainWindow", "B:"))




class Worker1(QThread):
    ImageUpdate = pyqtSignal(QImage)
    
    def run(self):
        self.ThreadActive = True
        Capture = cv2.VideoCapture(1)
        self.value = 0
        while self.ThreadActive:
            ret, frame = Capture.read()                       
            if ret:
                Image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                FlippedImage = cv2.flip(Image, 1)
                ConvertToQtFormat = QImage(FlippedImage.data, FlippedImage.shape[1], FlippedImage.shape[0], QImage.Format_RGB888)
                Pic = ConvertToQtFormat.scaled(640, 480, Qt.KeepAspectRatio)
                self.ImageUpdate.emit(Pic)
                if self.value == 1:
                    
                    cv2.imwrite("sampel.jpg", frame)
                    self.value = 0
            
        
        Capture.release()

    def count(self):

        self.value +=1


    def stop(self):
        print("capture releaseaaaa")
        self.ThreadActive = False            
        self.terminate()

class Worker2(QThread):
    suhuGUI = pyqtSignal(str)


    def run(self):
        self.ThreadActive = True
        print('test')
        self.ui = Ui_MainWindow()
        while self.ThreadActive:                  
            suhu = self.ui.write_read('4')
            print(suhu)
            suhuStr = suhu.decode('utf-8')
            if suhuStr != '':
                self.suhuGUI.emit(suhuStr)
    
    def stop(self):
        arduino.write(bytes('0','utf-8'))
        self.ThreadActive = False
        self.terminate()
    

class Worker3(QThread):
    stateManual = pyqtSignal(str)

    def run(self):
        self.ThreadActive = True
        self.ui = Ui_MainWindow();
        while self.ThreadActive:
            self.ui.write_read('5')
            
            self.stateManual.emit(" ")

    def stop(self):
        arduino.write(bytes('0','utf-8'))
        self.ThreadActive = False
        self.terminate()



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
